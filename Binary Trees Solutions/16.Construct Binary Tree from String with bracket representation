METHOD-->1  (TC->O(N2)  SC->O(N))

// Construct Binary Tree from String with Bracket Representation Solution
#include <bits/stdc++.h>
using namespace std;

// custom data type for tree building
struct Node {
	int data;
	struct Node* left;
	struct Node* right;
	Node(int val)
	{
		data = val;
		left = right = NULL;
	}
};

// Below function accepts sttring and a pointer variable as
// an argument
// and draw the tree. Returns the root of the tree
Node* constructtree(string s, int* start)
{
	// Assuming there is/are no negative
	// character/characters in the string
	if (s.size() == 0 || *start >= s.size())
		return NULL;

	// constructing a number from the continuous digits
	int num = 0;
	while (*start < s.size() && s[*start] != '('
		&& s[*start] != ')') {
		int num_here = (int)(s[*start] - '0');
		num = num * 10 + num_here;
		*start = *start + 1;
	}

	// creating a node from the constructed number from
	// above loop
	struct Node* root = new Node(num);

	// check if start has reached the end of the string
	if (*start >= s.size())
		return root;

	// As soon as we see first right parenthesis from the
	// current node we start to construct the tree in the
	// left
	if (*start < s.size() && s[*start] == '(') {
		*start = *start + 1;
		root->left = constructtree(s, start);
	}
	if (*start < s.size() && s[*start] == ')')
		*start = *start + 1;

	// As soon as we see second right parenthesis from the
	// current node we start to construct the tree in the
	// right
	if (*start < s.size() && s[*start] == '(') {
		*start = *start + 1;
		root->right = constructtree(s, start);
	}
	if (*start < s.size() && s[*start] == ')')
		*start = *start + 1;
	return root;
}
void preorder(Node* root)
{
	if (root == NULL)
		return;
	cout << root->data << " ";
	preorder(root->left);
	preorder(root->right);
}
int main()
{
	string s = "4(2(3)(1))(6(5))";
	// cin>>s;
	int start = 0;
	Node* root = constructtree(s, &start);
	preorder(root);
	return 0;
}
//This code is contributed by Chaitanya Sharma.





METHOD-->2 (TC->O(N)  SC->O(N))






// C++ program for the above approach

#include <bits/stdc++.h>
using namespace std;

// Build a tree node having left and
// right pointers set to null initially
struct Node {
	Node* left;
	Node* right;
	int data;

	// Constructor to set the data of
	// the newly created tree node
	Node(int element)
	{
		data = element;
		this->left = nullptr;
		this->right = nullptr;
	}
};

// Utility function to print
// preorder traversal of the tree
void preorder(Node* root)
{
	if (!root)
		return;

	cout << root->data << " ";
	preorder(root->left);
	preorder(root->right);
}

// Function to construct a
// tree using bracket notation
Node* constructTree(string s)
{

	// First character is the root of the tree
	Node* root = new Node(s[0] - '0');

	// Stack used to store the
	// previous root elements
	stack<Node*> stk;

	// Iterate over remaining characters
	for (int i = 1; i < s.length(); i++) {

		// If current character is '('
		if (s[i] == '(') {

			// Push root into stack
			stk.push(root);
		}

		// If current character is ')'
		else if (s[i] == ')') {

			// Make root the top most
			// element in the stack
			root = stk.top();

			// Remove the top node
			stk.pop();
		}

		// If current character is a number
		else {

			// If left is null, then put the new
			// node to the left and move to the
			// left of the root
			if (root->left == nullptr) {

				Node* left = new Node(s[i] - '0');
				root->left = left;
				root = root->left;
			}

			// Otherwise, if right is null, then
			// put the new node to the right and
			// move to the right of the root
			else if (root->right == nullptr) {

				Node* right = new Node(s[i] - '0');
				root->right = right;
				root = root->right;
			}
		}
	}

	// Return the root
	return root;
}

// Driver code
int main()
{
	// Input
	string s = "4(2(3)(1))(6(5))";

	// Function calls
	Node* root = constructTree(s);
	preorder(root);

	return 0;
}

